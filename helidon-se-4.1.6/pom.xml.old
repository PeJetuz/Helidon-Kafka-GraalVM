<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>io.helidon.applications</groupId>
    <artifactId>helidon-se</artifactId>
    <version>4.1.6</version>
    <relativePath/>
  </parent>
  <groupId>io.helidon.examples</groupId>
  <artifactId>helidon-quickstart-se</artifactId>
  <version>1.0-SNAPSHOT</version>

  <properties>
    <version.lib.google-protobuf>3.25.5</version.lib.google-protobuf>
    <version.lib.grpc>1.70.0</version.lib.grpc>
    <version.plugin.os>1.7.1</version.plugin.os>
    <version.kafka.protobuf.serializer>7.8.0</version.kafka.protobuf.serializer>
    <versio.kafka.clients>3.9.0</versio.kafka.clients>
    <mainClass>io.helidon.examples.quickstart.se.Main</mainClass>
    <kafka.image>bitnami/kafka:3.9.0</kafka.image>
    <kafka.name>kafka</kafka.name>
    <schema-registry.image>bitnami/schema-registry:7.8.0</schema-registry.image>
    <schema-registry.name>schema-registry</schema-registry.name>
  </properties>

  <dependencies>
    <dependency>
      <groupId>io.helidon.webserver</groupId>
      <artifactId>helidon-webserver</artifactId>
    </dependency>
    <dependency>
      <groupId>io.helidon.config</groupId>
      <artifactId>helidon-config-yaml</artifactId>
    </dependency>
    <dependency>
      <groupId>io.helidon.webserver.observe</groupId>
      <artifactId>helidon-webserver-observe-health</artifactId>
    </dependency>
    <dependency>
      <groupId>io.helidon.health</groupId>
      <artifactId>helidon-health-checks</artifactId>
    </dependency>
    <dependency>
      <groupId>jakarta.json</groupId>
      <artifactId>jakarta.json-api</artifactId>
    </dependency>
    <dependency>
      <groupId>io.helidon.http.media</groupId>
      <artifactId>helidon-http-media-jsonp</artifactId>
    </dependency>
    <dependency>
      <groupId>io.helidon.logging</groupId>
      <artifactId>helidon-logging-jul</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>io.helidon.webserver.observe</groupId>
      <artifactId>helidon-webserver-observe-metrics</artifactId>
    </dependency>
    <dependency>
      <groupId>io.helidon.metrics</groupId>
      <artifactId>helidon-metrics-system-meters</artifactId>
      <scope>runtime</scope>
    </dependency>
      <dependency>
          <groupId>io.helidon.messaging</groupId>
          <artifactId>helidon-messaging</artifactId>
      </dependency>
      <dependency>
          <groupId>io.helidon.messaging.kafka</groupId>
          <artifactId>helidon-messaging-kafka</artifactId>
      </dependency>
    <dependency>
      <groupId>org.apache.kafka</groupId>
      <artifactId>kafka-clients</artifactId>
      <version>${versio.kafka.clients}</version>
      <exclusions>
        <exclusion>
          <groupId>org.xerial.snappy</groupId>
          <artifactId>snappy-java</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.xerial.snappy</groupId>
      <artifactId>snappy-java</artifactId>
      <version>1.1.10.7</version>
    </dependency>
    <dependency>
      <groupId>io.confluent</groupId>
      <artifactId>kafka-protobuf-serializer</artifactId>
      <version>${version.kafka.protobuf.serializer}</version>
    </dependency>
    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java</artifactId>
      <version>${version.lib.google-protobuf}</version>
    </dependency>
    <dependency>
      <groupId>io.helidon.webclient</groupId>
      <artifactId>helidon-webclient</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-all</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.jcabi</groupId>
      <artifactId>jcabi-matchers</artifactId>
      <version>1.8.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.helidon.webserver.testing.junit5</groupId>
      <artifactId>helidon-webserver-testing-junit5</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.helidon.microprofile.testing</groupId>
      <artifactId>helidon-microprofile-testing-junit5</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <!--https://medium.com/@nik12321/protobuf-library-and-generated-java-code-using-maven-0ab4f1d60dc9-->
    <!--https://github.com/grpc/grpc-java/blob/master/README.md#generated-code-->
    <!--sourceDirectory>${project.basedir}/src/main/proto</sourceDirectory-->
    <extensions>
      <extension>
        <groupId>kr.motd.maven</groupId>
        <artifactId>os-maven-plugin</artifactId>
        <version>${version.plugin.os}</version>
      </extension>
    </extensions>
    <plugins>
      <plugin>
        <groupId>org.xolstice.maven.plugins</groupId>
        <artifactId>protobuf-maven-plugin</artifactId>
        <version>0.6.1</version>
        <configuration>
          <protocArtifact>
            com.google.protobuf:protoc:${version.lib.google-protobuf}:exe:${os.detected.classifier}
          </protocArtifact>
          <pluginId>grpc-java</pluginId>
          <pluginArtifact>
            io.grpc:protoc-gen-grpc-java:${version.lib.grpc}:exe:${os.detected.classifier}
          </pluginArtifact>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>test-compile</goal>
              <goal>compile-custom</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-libs</id>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.4.2</version>
        <executions>
          <execution>
            <goals>
              <goal>test-jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>integrotest</id>
      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>0.44.0</version>
            <configuration>
              <images>
                <image>
                  <alias>${kafka.name}</alias>
                  <name>${kafka.image}</name>
                  <run>
                    <hostname>${kafka.name}</hostname>
                    <env>
                      <KAFKA_CFG_NODE_ID>0</KAFKA_CFG_NODE_ID>
                      <KAFKA_CFG_PROCESS_ROLES>controller,broker</KAFKA_CFG_PROCESS_ROLES>
                      <KAFKA_CFG_LISTENERS>PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094</KAFKA_CFG_LISTENERS>
                      <KAFKA_CFG_ADVERTISED_LISTENERS>PLAINTEXT://${kafka.name}:9092,EXTERNAL://localhost:9094</KAFKA_CFG_ADVERTISED_LISTENERS>
                      <KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP>CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT</KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP>
                      <KAFKA_CFG_CONTROLLER_QUORUM_VOTERS>0@${kafka.name}:9093</KAFKA_CFG_CONTROLLER_QUORUM_VOTERS>
                      <KAFKA_CFG_CONTROLLER_LISTENER_NAMES>CONTROLLER</KAFKA_CFG_CONTROLLER_LISTENER_NAMES>
                    </env>
                    <ports>
                      <port>9094:9094</port>
                    </ports>
                  </run>
                </image>
                <image>
                  <alias>${schema-registry.name}</alias>
                  <name>${schema-registry.image}</name>
                  <run>
                    <hostname>${schema-registry.name}</hostname>
                    <env>
                      <SCHEMA_REGISTRY_KAFKA_BROKERS>PLAINTEXT://${kafka.name}:9092</SCHEMA_REGISTRY_KAFKA_BROKERS>
                      <SCHEMA_REGISTRY_LISTENERS>http://0.0.0.0:8081</SCHEMA_REGISTRY_LISTENERS>
                      <SCHEMA_REGISTRY_DEBUG>true</SCHEMA_REGISTRY_DEBUG>
                    </env>
                    <ports>
                      <port>8081:8081</port>
                    </ports>
                    <links>
                      <link>${kafka.name}</link>
                    </links>
                    <wait>
                      <http>
                        <url>http://localhost:8081/v1/metadata/id</url>
                      </http>
                      <time>100000</time>
                    </wait>
                  </run>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>start</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <!-- "build" should be used to create the images with the
                       artifact -->
                  <goal>build</goal>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <executions>
              <execution>
                <goals>
                  <goal>integration-test</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>native-image-static</id>
      <activation>
        <property>
          <name>native.image.buildStatic</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.graalvm.buildtools</groupId>
            <artifactId>native-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>build-native-image</id>
                <configuration>
                  <buildArgs combine.children="append">
                    <arg>
                      --libc=musl
                      --enable-http --enable-https
                      -H:+UnlockExperimentalVMOptions
                      --initialize-at-build-time=sun.instrument.InstrumentationImpl
                      -H:Log=registerResource:3
                    </arg>
                  </buildArgs>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
  <repositories>
    <repository>
      <id>confluent</id>
      <name>confluent</name>
      <url>https://packages.confluent.io/maven</url>
    </repository>
  </repositories>
</project>
