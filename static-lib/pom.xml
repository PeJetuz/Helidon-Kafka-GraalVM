<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>my.test</groupId>
  <artifactId>static-lib</artifactId>
  <version>1.0-SNAPSHOT</version>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <!--
    ISO 8601, see http://en.wikipedia.org/wiki/ISO_8601. This
    property is defined in order to give us an ability to use ${maven.build.timestamp}
    later in the file
     -->
    <maven.build.timestamp.format>yyyy-MM-dd HH:mm</maven.build.timestamp.format>
    <maven.compiler.source>23</maven.compiler.source>
    <maven.compiler.target>23</maven.compiler.target>
    <version.plugin.compiler>3.13.0</version.plugin.compiler>
    <version.plugin.jar>3.4.2</version.plugin.jar>
    <version.plugin.resources>3.3.1</version.plugin.resources>
    <version.plugin.nativeimage>0.10.5</version.plugin.nativeimage>
    <version.plugin.dependency>3.7.1</version.plugin.dependency>
    <version.plugin.exec>3.1.0</version.plugin.exec>
    <version.lib.junit>5.11.4</version.lib.junit>
    <version.lib.hamcrest>1.3</version.lib.hamcrest>
    <mainClass>my.runner.RunJUnit5Tests</mainClass>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.xerial.snappy</groupId>
      <artifactId>snappy-java</artifactId>
      <version>1.1.10.5</version>
    </dependency>
    <dependency>
      <groupId>com.github.luben</groupId>
      <artifactId>zstd-jni</artifactId>
      <version>1.5.6-4</version>
      <classifier>linux_amd64</classifier>
    </dependency>
    <dependency>
      <groupId>org.junit.platform</groupId>
      <artifactId>junit-platform-launcher</artifactId>
      <version>1.11.4</version>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${version.lib.junit}</version>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${version.lib.junit}</version>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-core</artifactId>
      <version>${version.lib.hamcrest}</version>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-all</artifactId>
      <version>${version.lib.hamcrest}</version>
    </dependency>
    <dependency>
      <groupId>com.jcabi</groupId>
      <artifactId>jcabi-matchers</artifactId>
      <version>1.8.0</version>
    </dependency>
  </dependencies>

  <build>
    <finalName>${project.artifactId}</finalName>
    <resources>
      <!--
            Filter resources in "process-resources" phase
            @link http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html
             -->
      <resource>
        <directory>${basedir}/src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <testResources>
      <!--
            Filter resources in "process-resources" phase
            @link http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html
             -->
      <testResource>
        <directory>${basedir}/src/test/resources</directory>
        <filtering>true</filtering>
      </testResource>
    </testResources>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${version.plugin.compiler}</version>
          <configuration>
            <source>${maven.compiler.source}</source>
            <target>${maven.compiler.target}</target>
            <optimize>true</optimize>
            <showWarnings>true</showWarnings>
            <failOnWarning>true</failOnWarning>
            <showDeprecation>true</showDeprecation>
            <proc>full</proc>
            <compilerArgs>
              <arg>-Xlint</arg>
              <arg>-Xlint:-path</arg>
              <!--  @see https://stackoverflow.com/questions/6770455  -->
              <arg>-Xpkginfo:always</arg>
              <!--  @see https://stackoverflow.com/questions/44675503/why-safevarargs-doesnt-suppress-the-warning  -->
              <arg>-Xlint:-varargs</arg>
              <!--  @see https://blogs.oracle.com/darcy/entry/bootclasspath_older_source  -->
              <arg>-Xlint:-options</arg>
              <!--  @see http://netbeans.org/bugzilla/show_bug.cgi?format=multiple&id=208666  -->
              <!--  this is to avoid a problem with ANTLR and JDK7  -->
              <arg>-Xlint:-classfile</arg>
              <!--  ignore APT warnings  -->
              <arg>-Xlint:-processing</arg>
            </compilerArgs>
            <testExcludes>
              <exclude>**/package-info.java</exclude>
            </testExcludes>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>${version.plugin.dependency}</version>
          <executions>
            <execution>
              <id>copy-libs</id>
              <phase>prepare-package</phase>
              <goals>
                <goal>copy-dependencies</goal>
              </goals>
              <configuration>
                <outputDirectory>${project.build.directory}/libs</outputDirectory>
                <overWriteReleases>false</overWriteReleases>
                <overWriteSnapshots>false</overWriteSnapshots>
                <overWriteIfNewer>true</overWriteIfNewer>
                <includeScope>runtime</includeScope>
                <!-- Hack to work-around https://github.com/square/okio/issues/1306 -->
                <excludeArtifactIds>okio</excludeArtifactIds>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <version>${version.plugin.resources}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>${version.plugin.jar}</version>
          <configuration>
            <archive>
              <manifest>
                <addClasspath>true</addClasspath>
                <classpathPrefix>libs</classpathPrefix>
                <!--suppress MavenModelInspection -->
                <mainClass>${mainClass}</mainClass>
                <useUniqueVersions>false</useUniqueVersions>
              </manifest>
            </archive>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.graalvm.buildtools</groupId>
          <artifactId>native-maven-plugin</artifactId>
          <version>${version.plugin.nativeimage}</version>
<!--          <executions>-->
<!--            <execution>-->
<!--              <id>resource-config</id>-->
<!--              <phase>package</phase>-->
<!--              <configuration>-->
<!--                &lt;!&ndash; generate records for all module's resources &ndash;&gt;-->
<!--                <isDetectionEnabled>true</isDetectionEnabled>-->
<!--              </configuration>-->
<!--            </execution>-->
<!--            <execution>-->
<!--              <id>build-native-image</id>-->
<!--              <phase>package</phase>-->
<!--              <configuration>-->
<!--                &lt;!&ndash; generate an argument file for native image - great for troubleshooting &ndash;&gt;-->
<!--                <useArgFile>true</useArgFile>-->
<!--                &lt;!&ndash; this needs to be defined to have a single set of jars on classpath,-->
<!--                default approach would add classpath of module (from maven) and from jar (manifest) &ndash;&gt;-->
<!--                <classesDirectory>${project.build.outputDirectory}</classesDirectory>-->
<!--                <imageName>${project.build.finalName}</imageName>-->
<!--                <fallback>false</fallback>-->
<!--                <metadataRepository>-->
<!--                  <enabled>false</enabled>-->
<!--                </metadataRepository>-->
<!--              </configuration>-->
<!--            </execution>-->
<!--          </executions>-->
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>native</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.graalvm.buildtools</groupId>
            <artifactId>native-maven-plugin</artifactId>
            <extensions>true</extensions>
            <executions>
              <execution>
                <id>build-native</id>
                <goals>
                  <goal>compile-no-fork</goal>
                </goals>
                <phase>package</phase>
                <configuration>
                  <useArgFile>true</useArgFile>
                  <classesDirectory>${project.build.outputDirectory}</classesDirectory>
                  <imageName>${project.build.finalName}</imageName>
                  <fallback>false</fallback>
                  <classpath>${project.build.directory}/libs,${project.build.directory}/static-lib.jar</classpath>
                  <buildArgs>
                    <arg>-H:+UnlockExperimentalVMOptions</arg>
                    <arg>-H:+ReportExceptionStackTraces</arg>
                    <arg>-H:Log=registerResource:3</arg>
                    <arg>--initialize-at-run-time=org.xerial.snappy</arg>
                    <arg>--libc=musl</arg>
                  </buildArgs>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
